import os

from dotenv import load_dotenv
from pydantic import ValidationError
from telebot import TeleBot, types

from resume_parser.dto import CriteriaDTO
from resume_parser.exceptions import ResumeNotFoundError
from resume_parser.robota_ua_resume_parser import RobotaUaResumeParser
from resume_parser.robota_ua_resume_searcher import RobotaUaResumeSearcher
from resume_parser.work_ua_resume_parser import WorkUaResumeParser
from resume_parser.work_ua_resume_searcher import SALARY, WorkUaResumeSearcher

load_dotenv()
TOKEN = os.environ.get("TOKEN")

bot = TeleBot(TOKEN, parse_mode="HTML")

user_responses = {}


@bot.message_handler(commands=["start"])
def start(message):
    user_responses[message.chat.id] = {}
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    position = types.KeyboardButton(text="–ü–æ—Å–∞–¥–∞")
    location = types.KeyboardButton(text="–õ–æ–∫–∞—Ü—ñ—è")
    salary_from = types.KeyboardButton(text="–î–æ—Å–≤—ñ–¥")
    salary_to = types.KeyboardButton(text="–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤—ñ–¥")
    experience = types.KeyboardButton(text="–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ")
    keywords = types.KeyboardButton(text="–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
    keyboard.add(position, location, salary_from, salary_to, experience, keywords)
    bot.send_message(
        message.chat.id,
        """
<b>–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç ResumeFinderüîç</b>

–Ø –¥–æ–ø–æ–º–æ–∂—É –í–∞–º –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ <b>—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ —Ä–µ–∑—é–º–µ</b> –Ω–∞ —Ç–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, —è–∫ work.ua —Ç–∞ robota.ua. 
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—ñ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñüëá –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –≤–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—Éüîç. 
<b>–û–±–æ–≤'—è–∑–∫–æ–≤–æ</b> –≤–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∞–¥—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –¢–∞–∫–æ–∂ –≤–∫–∞–∂—ñ—Ç—å —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —â–æ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –∑–≤—É–∑–∏—Ç–∏ –∫–æ–ª–æ –ø–æ—à—É–∫—É. 
–í–∫–∞–∑–∞–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –æ—Ü—ñ–Ω–∏—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

/help - —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.
        """,
        reply_markup=keyboard,
    )


@bot.message_handler(commands=["help"])
def help_handler(message):
    bot.send_message(
        message.chat.id,
        """
<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏</b>

/start - –ö–æ–º–∞–Ω–¥–∞ —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º.
/help - –ö–æ–º–∞–Ω–¥–∞ —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç–∞ —ó—Ö –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å.
/check - –ö–æ–º–∞–Ω–¥–∞ —â–æ–± –≤–∏–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É —Ä–µ–∑—é–º–µ.
/clear - –ö–æ–º–∞–Ω–¥–∞ —â–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–¥–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
/find_on_work - –ö–æ–º–∞–Ω–¥–∞ —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ–∑—é–º–µ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞ —Å–∞–π—Ç—ñ work.ua.
/find_on_robota - –ö–æ–º–∞–Ω–¥–∞ —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ–∑—é–º–µ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞ —Å–∞–π—Ç—ñ robota.ua.
/find_on_all - –ö–æ–º–∞–Ω–¥–∞ —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ–∑—é–º–µ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞ –æ–±–æ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.

–ü–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º —Ä–µ–∑—é–º–µ <b>–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏</b> –¥–ª—è –ø–æ—à—É–∫—É. 
–î–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤—Ä—É—á–Ω—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <i>–ü–æ—Å–∞–¥–∞</i>,
—â–æ –±—É–¥–µ —Å–∏–≥–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ —Ç–µ, —â–æ –í–∏ —Ö–æ—á–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –¥–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.

<b>–í–∫–∞–∑—É–π—Ç–µ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏</b>, —á–∏–º –±—ñ–ª—å—à–µ —Ç–∏–º –∫—Ä–∞—â–µ, —Ü–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∏–¥—ñ–ª–∏—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ä–µ–∑—é–º–µ.
        """,
    )


@bot.message_handler(commands=["find_on_work"])
def find_resume_on_work(message):
    try:
        user_responses[message.chat.id]
    except KeyError:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    try:
        criteria = get_criteria(message)
    except ValidationError:
        bot.send_message(message.chat.id, "–ü–æ—Å–∞–¥–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –∞–±–æ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ —ñ–Ω—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
        return

    bot.send_message(message.chat.id, "–®—É–∫–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ work.ua, —Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –ø–µ–≤–Ω–∏–π —á–∞—Å.")

    work_ua_searcher = WorkUaResumeSearcher()

    try:
        work_ua_searcher.set_params(criteria)
    except ResumeNotFoundError:
        bot.send_message(message.chat.id, "–†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    work_ua_resume_parser = WorkUaResumeParser()
    work_ua_resume_parser.pars_resumes(work_ua_searcher.resume_links, criteria)

    work_ua_results = work_ua_resume_parser.get_relevant_resumes(5)
    bot.send_message(message.chat.id, "<b>–ó–≤—ñ—Ç –ø–æ—à—É–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ work.ua</b>")
    for index, result in enumerate(work_ua_results.items()):
        if result[1]["is_file"]:
            bot.send_message(
                message.chat.id,
                f"""
üìå –ö–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ{index + 1}
- <b>–ü–æ—Å–∞–¥–∞</b>: <a href="{result[0]}">{result[1]["position"]}</a>
- –£—Å—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ —è–∫–∏–º–∏ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ —Ä–µ–∑—é–º–µ: {result[1]["matching_keywords"]}
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {result[1]["points"]}
- –†–µ–∑—é–º–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–º, –∞ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç—ñ, —Ç–æ–º—É —Ä–æ–∑–¥—ñ–ª–∏ –Ω–∞–≤–∏—á–æ–∫, –æ—Å–≤—ñ—Ç–∏ —Ç–∞ –¥–æ—Å–≤—ñ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.
                """
            )
        else:
            bot.send_message(
                message.chat.id,
                f"""
üìå –ö–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ{index + 1}
- <b>–ü–æ—Å–∞–¥–∞</b>: <a href="{result[0]}">{result[1]["position"]}</a>
- {result[1]["experience"]}
- {result[1]["education"]}
- –ù–∞–≤–∏—á–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, —â–æ —Å–ø—ñ–≤–ø–∞–ª–∏ –∑ –≤–∫–∞–∑–∞–Ω–∏–º–∏: {result[1]["matching_skills"]}
- –£—Å—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ —è–∫–∏–º–∏ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ —Ä–µ–∑—é–º–µ: {result[1]["matching_keywords"]}
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {result[1]["points"]}
                """
            )


@bot.message_handler(commands=["find_on_robota"])
def find_resume_on_robota(message):
    try:
        user_responses[message.chat.id]
    except KeyError:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    try:
        criteria = get_criteria(message)
    except ValidationError:
        bot.send_message(message.chat.id, "–ü–æ—Å–∞–¥–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –∞–±–æ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ —ñ–Ω—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
        return

    bot.send_message(message.chat.id, "–®—É–∫–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ robota.ua, —Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –ø–µ–≤–Ω–∏–π —á–∞—Å.")

    robota_ua_searcher = RobotaUaResumeSearcher()

    try:
        robota_ua_searcher.set_params(criteria)
    except ResumeNotFoundError:
        bot.send_message(message.chat.id, "–†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    robota_ua_resume_parser = RobotaUaResumeParser()
    robota_ua_resume_parser.pars_resumes(robota_ua_searcher.resume_links, criteria)

    robota_ua_results = robota_ua_resume_parser.get_relevant_resumes(5)
    bot.send_message(message.chat.id, "<b>–ó–≤—ñ—Ç –ø–æ—à—É–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ robota.ua</b>")
    for index, result in enumerate(robota_ua_results.items()):
        bot.send_message(
            message.chat.id,
            f"""
üìå –ö–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ{index + 1}
- <b>–ü–æ—Å–∞–¥–∞</b>: <a href="{result[0]}">{result[1]["position"]}</a>
- {result[1]["experience"]}
- {result[1]["education"]}
- –£—Å—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ —è–∫–∏–º–∏ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ —Ä–µ–∑—é–º–µ: {result[1]["matching_keywords"]}
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {result[1]["points"]}
            """
        )


@bot.message_handler(commands=["find_on_all"])
def find_resume_on_all(message):
    find_resume_on_work(message)
    find_resume_on_robota(message)


@bot.message_handler(commands=["check"])
def check_params(message):
    try:
        user_responses[message.chat.id]
    except KeyError:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    bot.send_message(
        message.chat.id,
        f"""
<b>–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É —Ä–µ–∑—é–º–µ</b>: 
–ü–æ–∑–∏—Ü—ñ—è: <i>{user_responses[message.chat.id].get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}</i>
–õ–æ–∫–∞—Ü—ñ—è: <i>{user_responses[message.chat.id].get('location', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}</i>
–î–æ—Å–≤—ñ–¥: <i>{user_responses[message.chat.id].get('experience', '–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π')}</i>
–ó–∞—Ä–ø–ª–∞—Ç–∞ (–≤—ñ–¥): <i>{user_responses[message.chat.id].get('salary_from', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}</i>
–ó–∞—Ä–ø–ª–∞—Ç–∞ (–¥–æ): <i>{user_responses[message.chat.id].get('salary_to', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}</i>
–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: <i>{user_responses[message.chat.id].get('keywords', '–ù–µ –≤–∫–∞–∑–∞–Ω—ñ')}</i>
"""
    )


@bot.message_handler(commands=["clear"])
def clear_params(message):
    try:
        user_responses[message.chat.id]
    except KeyError:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    user_responses[message.chat.id] = {}
    bot.send_message(message.chat.id, "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—á–∏—â–µ–Ω–æ")


def get_criteria(message):
    criteria = CriteriaDTO(
        position=user_responses[message.chat.id].get("position"),
        location=user_responses[message.chat.id].get("location"),
        salary_from=user_responses[message.chat.id].get("salary_from"),
        salary_to=user_responses[message.chat.id].get("salary_to"),
        experience=user_responses[message.chat.id].get("experience"),
        skills_and_keywords=user_responses[message.chat.id].get("keywords"),
    )
    return criteria


@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):
    try:
        user_responses[message.chat.id]
    except KeyError:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    if message.text.lower() == "–ø–æ—Å–∞–¥–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–∞–¥–∏ –Ω–∞ —è–∫—É –í–∏ —à—É–∫–∞—î—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        bot.register_next_step_handler(message, set_position)
    if message.text.lower() == "–ª–æ–∫–∞—Ü—ñ—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞")
        bot.register_next_step_handler(message, set_location)
    if message.text.lower() == "–∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ñ–¥":
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –∑–∞—Ä–ø–ª–∞—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –≥—Ä–Ω. "
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: {list(SALARY.keys())[1:]}",
        )
        bot.register_next_step_handler(message, set_salary_from)
    if message.text.lower() == "–∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ":
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –∑–∞—Ä–ø–ª–∞—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –≥—Ä–Ω. "
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: {list(SALARY.keys())[1:]}",
        )
        bot.register_next_step_handler(message, set_salary_to)
    if message.text.lower() == "–¥–æ—Å–≤—ñ–¥":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–æ—Å–≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —É —Ä–æ–∫–∞—Ö")
        bot.register_next_step_handler(message, set_experience)
    if message.text.lower() == "–∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞":
        bot.send_message(
            message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ —Ä–µ–∑—é–º–µ, –ø–µ—Ä–µ–ª—ñ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É"
        )
        bot.register_next_step_handler(message, set_keywords)


def set_position(message):
    user_responses[message.chat.id]["position"] = message.text
    bot.send_message(message.chat.id, f"–ü–æ—Å–∞–¥–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {message.text}")


def set_location(message):
    user_responses[message.chat.id]["location"] = message.text
    bot.send_message(message.chat.id, f"–ú—ñ—Å—Ç–æ –ø–æ—à—É–∫—É: {message.text}")


def set_salary_from(message):
    user_responses[message.chat.id]["salary_from"] = message.text
    bot.send_message(message.chat.id, f"–ó–∞—Ä–ø–ª–∞—Ç–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (–≤—ñ–¥): {message.text}")


def set_salary_to(message):
    user_responses[message.chat.id]["salary_to"] = message.text
    bot.send_message(message.chat.id, f"–ó–∞—Ä–ø–ª–∞—Ç–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (–¥–æ): {message.text}")


def set_experience(message):
    user_responses[message.chat.id]["experience"] = message.text
    bot.send_message(message.chat.id, f"–î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {message.text}")


def set_keywords(message):
    user_responses[message.chat.id]["keywords"] = message.text.split(", ")
    bot.send_message(message.chat.id, f"–ù–∞–≤–∏—á–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ —Ä–µ–∑—é–º–µ: {message.text}")


def run_bot():
    bot.infinity_polling()
